import telebot
import sqlite3
from telebot import types
from storage.config import TOKEN  # –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞
import random

bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
def create_table():
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        age TEXT,
        photo TEXT,
        cours TEXT,
        gender TEXT,
        description TEXT,
        owner_id INTEGER,
        liked_by TEXT,
        free_time TEXT,
        preference TEXT,
        dream_place TEXT,
        desired_skill TEXT,
        memorable_experience TEXT,
        historical_question TEXT,
        memorable_gift TEXT,
        change_rule TEXT,
        superpower TEXT,
        qa1_question TEXT,
        qa1_answer TEXT,
        qa2_question TEXT,
        qa2_answer TEXT,
        qa3_question TEXT,
        qa3_answer TEXT
    )''')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    cur.execute('PRAGMA table_info(users)')
    columns = cur.fetchall()
    column_names = [column[1] for column in columns]

    if 'age' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN age TEXT')
    if 'photo' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN photo TEXT')
    if 'cours' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN cours TEXT')
    if 'gender' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN gender TEXT')
    if 'description' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN description TEXT')
    if 'owner_id' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN owner_id INTEGER')
    if 'liked_by' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN liked_by TEXT')
    if 'free_time' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN free_time TEXT')
    if 'preference' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN preference TEXT')
    if 'dream_place' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN dream_place TEXT')
    if 'desired_skill' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN desired_skill TEXT')
    if 'memorable_experience' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN memorable_experience TEXT')
    if 'historical_question' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN historical_question TEXT')
    if 'memorable_gift' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN memorable_gift TEXT')
    if 'change_rule' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN change_rule TEXT')
    if 'superpower' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN superpower TEXT')
    if 'qa1_question' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN qa1_question TEXT')
    if 'qa1_answer' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN qa1_answer TEXT')
    if 'qa2_question' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN qa2_question TEXT')
    if 'qa2_answer' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN qa2_answer TEXT')
    if 'qa3_question' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN qa3_question TEXT')
    if 'qa3_answer' not in column_names:
        cur.execute('ALTER TABLE users ADD COLUMN qa3_answer TEXT')

    conn.commit()
    cur.close()
    conn.close()

def safe_delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"Error deleting message {message_id} in chat {chat_id}: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
create_table()

#   /start
@bot.message_handler(commands=['start'])
def start_chat(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn_about = types.KeyboardButton('–û –±–æ—Ç–µ')
    btn_yes = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
    btn_no = types.KeyboardButton('–Ø –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤')
    markup.row(btn_about)
    markup.row(btn_yes, btn_no)
    bot.send_message(message.chat.id,
                     f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n"
                     f"—ç—Ç–æ –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–≤–æ–∏—Ö —Å–æ—Ñ—Ç —Å–∫–∏–ª–ª–æ–≤ –∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏üòÉ –ó–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É –∏ –Ω–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è!",
                     parse_mode='html', reply_markup=markup)
    safe_delete_message(message.chat.id, message.message_id)

@bot.message_handler(func=lambda message: message.text in ['–û –±–æ—Ç–µ', '–ù–∞—á–∞—Ç—å', '–Ø –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤'])
def start_menu(message):
    if message.text == "–Ø –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.KeyboardButton('–ì–æ—Ç–æ–≤'))
        bot.send_message(message.chat.id, '–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=markup)
        safe_delete_message(message.chat.id, message.message_id)
        safe_delete_message(message.chat.id, message.message_id - 1)

    elif message.text == "–ù–∞—á–∞—Ç—å":
        safe_delete_message(message.chat.id, message.message_id - 1)
        check_and_create_profile(message)

    elif message.text == "–û –±–æ—Ç–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –æ–± –∞–≤—Ç–æ—Ä–∞—Ö', reply_markup=markup)
        safe_delete_message(message.chat.id, message.message_id)
        safe_delete_message(message.chat.id, message.message_id - 1)

@bot.message_handler(func=lambda message: message.text == '–ì–æ—Ç–æ–≤')
def ready(message):
    safe_delete_message(message.chat.id, message.message_id - 1)
    check_and_create_profile(message)

@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def about_us(message):
    safe_delete_message(message.chat.id, message.message_id - 1)
    start_chat(message)

# Check if the user already has a profile
def check_and_create_profile(message):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM users WHERE owner_id = ?', (message.from_user.id,))
    user_profile = cur.fetchone()
    cur.close()
    conn.close()

    print(f"User Profile: {user_profile}")  # Debugging information

    if user_profile:
        show_user_profile(message, user_profile)
    else:
        create_profil(message)

# Show the user's existing profile
def show_user_profile(message, user_profile):
    print(f"User Profile: {user_profile}")  # Debugging information
    if len(user_profile) < 24:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    start = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
    edit = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
    markup.row(start, edit)
    bot.send_photo(message.chat.id, user_profile[3], caption=f'{user_profile[1]}, {user_profile[2]} –ª–µ—Ç\n{user_profile[4]}\n–ü–æ–ª: {user_profile[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {user_profile[6]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 1: {user_profile[18]}\n–û—Ç–≤–µ—Ç: {user_profile[19]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 2: {user_profile[20]}\n–û—Ç–≤–µ—Ç: {user_profile[21]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 3: {user_profile[22]}\n–û—Ç–≤–µ—Ç: {user_profile[23]}', reply_markup=markup)

# –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
def create_profil(message, user_profile=None):
    safe_delete_message(message.chat.id, message.message_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    if user_profile:
        markup.add(types.KeyboardButton(user_profile[1]))
    else:
        markup.add(types.KeyboardButton(message.from_user.first_name))
    bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–µ–±–µ –∞–Ω–∫–µ—Ç—É')
    bot.send_message(message.chat.id, '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: user_name(msg, user_profile))

# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
def user_name(message, user_profile):
    name = message.text.strip()
    safe_delete_message(message.chat.id, message.message_id)
    safe_delete_message(message.chat.id, message.message_id - 1)
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: user_age(msg, name, user_profile))

# –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
def user_age(message, name, user_profile):
    if message.text.strip().isdigit():
        age = message.text.strip()
        safe_delete_message(message.chat.id, message.message_id - 1)
        safe_delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã')
        bot.register_next_step_handler(message, lambda msg: user_icon(msg, name, age, user_profile))
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        bot.register_next_step_handler(message, lambda msg: user_age(msg, name, user_profile))

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
def user_icon(message, name, age, user_profile):
    if message.content_type == 'photo':
        photo = message.photo[-1].file_id
        safe_delete_message(message.chat.id, message.message_id - 1)
        safe_delete_message(message.chat.id, message.message_id)
        choose_cours(message, name, age, photo, user_profile)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
        safe_delete_message(message.chat.id, message.message_id)
        bot.register_next_step_handler(message, lambda msg: user_icon(msg, name, age, user_profile))

def choose_cours(message, name, age, photo, user_profile):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    first = types.KeyboardButton('1 –∫—É—Ä—Å/10 –∫–ª–∞—Å—Å')
    second = types.KeyboardButton('2 –∫—É—Ä—Å')
    third = types.KeyboardButton('3 –∫—É—Ä—Å')
    markup.add(first)
    markup.row(second, third)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: user_cours(msg, name, age, photo, user_profile))

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
def user_cours(message, name, age, photo, user_profile):
    cours = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    male = types.KeyboardButton('–ú—É–∂—Å–∫–æ–π')
    female = types.KeyboardButton('–ñ–µ–Ω—Å–∫–∏–π')
    markup.row(male, female)
    safe_delete_message(message.chat.id, message.message_id - 1)
    safe_delete_message(message.chat.id, message.message_id)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: user_gender(msg, name, age, photo, cours, user_profile))

def user_gender(message, name, age, photo, cours, user_profile):
    gender = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
    safe_delete_message(message.chat.id, message.message_id - 1)
    bot.send_message(message.chat.id, '–î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∞–Ω–∫–µ—Ç–µ:', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: user_discription(msg, name, age, photo, cours, gender, user_profile))

def user_discription(message, name, age, photo, cours, gender, user_profile):
    if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        description = ''
    else:
        description = message.text

    questions = [
        '–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ó–µ–º–ª–µ –¥–ª—è –∂–∏–∑–Ω–∏ –Ω–∞ –≥–æ–¥, –≥–¥–µ –±—ã —ç—Ç–æ –±—ã–ª–æ –∏ –ø–æ—á–µ–º—É?',
        '–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ –∏–ª–∏ —É–º–µ–Ω–∏–µ –≤—ã –≤—Å–µ–≥–¥–∞ —Ö–æ—Ç–µ–ª–∏ –æ—Å–≤–æ–∏—Ç—å, –Ω–æ –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏, –∏ —á—Ç–æ –≤–∞—Å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç?',
        '–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –æ–ø—ã—Ç –≤—ã –ø–µ—Ä–µ–∂–∏–ª–∏, –∏ —á—Ç–æ –æ–Ω –≤–∞–º –¥–∞–ª?',
        '–ï—Å–ª–∏ –±—ã —É –≤–∞—Å –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –ª—é–±–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏, –∫—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª –∏ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã –±—ã –∑–∞–¥–∞–ª–∏?',
        '–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –ø–æ–¥–∞—Ä–æ–∫ –≤—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ–ª—É—á–∞–ª–∏, –∏ —á—Ç–æ –æ–Ω –¥–ª—è –≤–∞—Å –∑–Ω–∞—á–∏–ª?',
        '–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –∏–ª–∏ –∑–∞–∫–æ–Ω –≤ –º–∏—Ä–µ, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ –∏ –ø–æ—á–µ–º—É?',
        '–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –æ–±–ª–∞–¥–∞—Ç—å –ª—é–±–æ–π —Å—É–ø–µ—Ä—Å–∏–ª–æ–π, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ –∏ –∫–∞–∫ –±—ã –≤—ã –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏?'
    ]
    selected_questions = random.sample(questions, 3)
    bot.send_message(message.chat.id, f'{selected_questions[0]}')
    bot.register_next_step_handler(message, lambda msg: user_qa1(msg, name, age, photo, cours, gender, description, selected_questions[0], selected_questions[1], selected_questions[2], user_profile))

def user_qa1(message, name, age, photo, cours, gender, description, qa1, qa2, qa3, user_profile):
    qa1_answer = message.text
    bot.send_message(message.chat.id, f'{qa2}')
    bot.register_next_step_handler(message, lambda msg: user_qa2(msg, name, age, photo, cours, gender, description, qa1, qa1_answer, qa2, qa3, user_profile))

def user_qa2(message, name, age, photo, cours, gender, description, qa1, qa1_answer, qa2, qa3, user_profile):
    qa2_answer = message.text
    bot.send_message(message.chat.id, f'{qa3}')
    bot.register_next_step_handler(message, lambda msg: user_qa3(msg, name, age, photo, cours, gender, description, qa1, qa1_answer, qa2, qa2_answer, qa3, user_profile))

def user_qa3(message, name, age, photo, cours, gender, description, qa1, qa1_answer, qa2, qa2_answer, qa3, user_profile):
    qa3_answer = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    start = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
    edit = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
    markup.row(start, edit)
    safe_delete_message(message.chat.id, message.message_id - 1)
    bot.send_photo(message.chat.id, photo, caption=f'{name}, {age} –ª–µ—Ç\n{cours}\n–ü–æ–ª: {gender}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 1: {qa1}\n–û—Ç–≤–µ—Ç: {qa1_answer}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 2: {qa2}\n–û—Ç–≤–µ—Ç: {qa2_answer}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 3: {qa3}\n–û—Ç–≤–µ—Ç: {qa3_answer}', reply_markup=markup)

    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    if user_profile:
        cur.execute("UPDATE users SET name = ?, age = ?, photo = ?, cours = ?, gender = ?, description = ?, qa1_question = ?, qa1_answer = ?, qa2_question = ?, qa2_answer = ?, qa3_question = ?, qa3_answer = ? WHERE owner_id = ?",
                     (name, age, photo, cours, gender, description, qa1, qa1_answer, qa2, qa2_answer, qa3, qa3_answer, message.from_user.id))
    else:
        cur.execute("INSERT INTO users (name, age, photo, cours, gender, description, owner_id, liked_by, free_time, preference, historical_question, memorable_gift, change_rule, qa1_question, qa1_answer, qa2_question, qa2_answer, qa3_question, qa3_answer) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                     (name, age, photo, cours, gender, description, message.from_user.id, '', '', '', '', '', '', qa1, qa1_answer, qa2, qa2_answer, qa3, qa3_answer))
    conn.commit()
    cur.close()
    conn.close()

# Edit existing profile
def edit_profile(message):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM users WHERE owner_id = ?', (message.from_user.id,))
    user_profile = cur.fetchone()
    cur.close()
    conn.close()

    print(f"User Profile: {user_profile}")  # Debugging information

    if user_profile:
        create_profil(message, user_profile)
    else:
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

#   /help
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, f"–≠—Ç–æ –æ–∫–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã\n/help"
                     f"\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –±–∞–≥–∏/–æ—à–∏–±–∫–∏, –∏ –º—ã –∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–ºüôÉ"
                     f"\n@Ssserpentine - —Å—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç –æ –±–∞–≥–∞—Ö")

#   /clear_db
@bot.message_handler(commands=['clear_db'])
def clear_db(message):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute("DELETE FROM users")
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.')

#   /view_profiles
@bot.message_handler(commands=['view_profiles'])
def view_profiles(message):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    if users:
        current_index = 0
        show_profile(message, users, current_index)
    else:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.')

    cur.close()
    conn.close()

def show_profile(message, users, current_index):
    user = users[current_index]
    if user[7] == message.from_user.id:
        current_index += 1
        if current_index < len(users):
            show_profile(message, users, current_index)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.add(back)
            bot.send_message(message.chat.id, '–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç.', reply_markup=markup)
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    like = types.KeyboardButton(text='–õ–∞–π–∫')
    skip = types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    stop = types.KeyboardButton(text='–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä')
    markup.row(like, skip)
    markup.add(stop)
    bot.send_photo(message.chat.id, user[3], caption=f'{user[1]}, {user[2]} –ª–µ—Ç\n{user[4]}\n–ü–æ–ª: {user[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {user[6]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 1: {user[18]}\n–û—Ç–≤–µ—Ç: {user[19]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 2: {user[20]}\n–û—Ç–≤–µ—Ç: {user[21]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 3: {user[22]}\n–û—Ç–≤–µ—Ç: {user[23]}', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: handle_profile_actions(msg, users, current_index))

def handle_profile_actions(message, users, current_index):
    if message.text == '–õ–∞–π–∫':
        user = users[current_index]
        owner_id = user[7]
        liker_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã –≤ –æ—Ç–≤–µ—Ç
        conn = sqlite3.connect('database.sql')
        cur = conn.cursor()
        cur.execute('SELECT liked_by FROM users WHERE owner_id = ?', (owner_id,))
        liked_by = cur.fetchone()[0]

        if liked_by and str(liker_id) in liked_by.split(','):
            # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã –ª–∞–π–∫–Ω—É–ª –≤ –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º –æ–±–æ–∏–º –Ω–∏–∫–Ω–µ–π–º—ã
            cur.execute('SELECT name FROM users WHERE owner_id = ?', (owner_id,))
            owner_name = cur.fetchone()[0]
            cur.execute('SELECT name FROM users WHERE owner_id = ?', (liker_id,))
            liker_name = cur.fetchone()[0]

            bot.send_message(owner_id, f'–í—ã –∏ {liker_name} –ª–∞–π–∫–Ω—É–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞! –ù–∏–∫–Ω–µ–π–º {liker_name}: @{message.from_user.username}')
            bot.send_message(liker_id, f'–í—ã –∏ {owner_name} –ª–∞–π–∫–Ω—É–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞! –ù–∏–∫–Ω–µ–π–º {owner_name}: @{user[1]}')
        else:
            # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –∞–Ω–∫–µ—Ç—ã –µ—â–µ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤ –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–µ—Ä–∞
            cur.execute('SELECT * FROM users WHERE owner_id = ?', (liker_id,))
            liker_profile = cur.fetchone()
            bot.send_photo(owner_id, liker_profile[3], caption=f'{liker_profile[1]}, {liker_profile[2]} –ª–µ—Ç\n{liker_profile[4]}\n–ü–æ–ª: {liker_profile[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {liker_profile[6]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 1: {liker_profile[18]}\n–û—Ç–≤–µ—Ç: {liker_profile[19]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 2: {liker_profile[20]}\n–û—Ç–≤–µ—Ç: {liker_profile[21]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 3: {liker_profile[22]}\n–û—Ç–≤–µ—Ç: {liker_profile[23]}')

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ liked_by –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã
            if liked_by:
                liked_by += f',{liker_id}'
            else:
                liked_by = f'{liker_id}'
            cur.execute('UPDATE users SET liked_by = ? WHERE owner_id = ?', (liked_by, owner_id))
            conn.commit()

            # Notify the liker
            notify_liker(message, owner_id, user)

        cur.close()
        conn.close()

        current_index += 1
        if current_index < len(users):
            show_profile(message, users, current_index)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.add(back)
            bot.send_message(message.chat.id, '–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç.', reply_markup=markup)
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        current_index += 1
        if current_index < len(users):
            show_profile(message, users, current_index)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            back = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.add(back)
            bot.send_message(message.chat.id, '–ë–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –Ω–µ—Ç.', reply_markup=markup)
    elif message.text == '–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        edit = types.KeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
        continue_viewing = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä')
        delete_profile = types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
        markup.row(edit, continue_viewing)
        markup.add(delete_profile)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        bot.register_next_step_handler(message, handle_menu_actions)

def handle_menu_actions(message):
    if message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É':
        edit_profile(message)
    elif message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä':
        view_profiles(message)
    elif message.text == '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
        conn = sqlite3.connect('database.sql')
        cur = conn.cursor()
        cur.execute("DELETE FROM users WHERE owner_id = ?", (message.from_user.id,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.')

def notify_liker(message, owner_id, user):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    view = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
    skip = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
    markup.row(view, skip)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞! –ù–∞–∂–º–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ —ç—Ç–æ.', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: handle_view_liker(msg, owner_id, user))

def handle_view_liker(message, owner_id, user):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        bot.send_photo(message.chat.id, user[3], caption=f'{user[1]}, {user[2]} –ª–µ—Ç\n{user[4]}\n–ü–æ–ª: {user[5]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {user[6]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 1: {user[18]}\n–û—Ç–≤–µ—Ç: {user[19]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 2: {user[20]}\n–û—Ç–≤–µ—Ç: {user[21]}\n–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç 3: {user[22]}\n–û—Ç–≤–µ—Ç: {user[23]}')
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        bot.send_message(message.chat.id, '–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã.')

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
def start_viewing_profiles(message):
    view_profiles(message)

@bot.message_handler(func=lambda message: message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
def start_editing_profile(message):
    edit_profile(message)

bot.polling(non_stop=True)
